/* eslint sort-keys: "error" -- Organise rules */

import eslintCommentsPlugin from 'eslint-plugin-eslint-comments';
import importPlugin from 'eslint-plugin-import';
import promisePlugin from 'eslint-plugin-promise';
import regexpPlugin from 'eslint-plugin-regexp';
import sonarjsPlugin from 'eslint-plugin-sonarjs';
import unicornPlugin from 'eslint-plugin-unicorn';

export default {
  // eslint-disable-next-line unicorn/no-useless-spread -- Keeps the unprefixed core rules together
  ...{
    'accessor-pairs': ['error', { setWithoutGet: true }],
    'array-callback-return': 'error',
    'block-scoped-var': 'error',
    'capitalized-comments': ['error', 'always', { ignoreConsecutiveComments: true }],
    'consistent-return': 'error',
    'consistent-this': ['error', '_this'],
    'constructor-super': 'error',
    'default-case': 'error',
    'default-case-last': 'error',
    'default-param-last': 'error',
    'dot-notation': 'error',
    eqeqeq: ['error', 'always', { null: 'ignore' }],
    'for-direction': 'error',
    'func-names': ['error', 'as-needed'],
    'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
    'getter-return': 'error',
    'global-require': 'error',
    'grouped-accessor-pairs': ['error', 'getBeforeSet'],
    'guard-for-in': 'error',
    'id-denylist': ['error', 'e', 'err', 'evt', 'cb'],
    'lines-between-class-members': 'error',
    'logical-assignment-operators': ['error', 'always'],
    'max-classes-per-file': ['error', 1],
    'max-statements-per-line': 'error',
    'multiline-comment-style': 'error',
    'new-cap': ['error', { properties: true }],
    'no-alert': 'error',
    'no-array-constructor': 'error',
    'no-async-promise-executor': 'error',
    'no-await-in-loop': 'error',
    'no-bitwise': 'error',
    'no-buffer-constructor': 'error',
    'no-caller': 'error',
    'no-case-declarations': 'error',
    'no-class-assign': 'error',
    'no-compare-neg-zero': 'error',
    'no-cond-assign': 'error',
    'no-const-assign': 'error',
    'no-constant-binary-expression': 'error',
    'no-constant-condition': 'error',
    'no-constructor-return': 'error',
    'no-control-regex': 'error',
    'no-debugger': 'error',
    'no-delete-var': 'error',
    'no-div-regex': 'error',
    'no-dupe-args': 'error',
    'no-dupe-class-members': 'error',
    'no-dupe-else-if': 'error',
    'no-dupe-keys': 'error',
    'no-duplicate-case': 'error',
    'no-duplicate-imports': 'error',
    'no-empty': 'error',
    'no-empty-character-class': 'error',
    'no-empty-function': 'error',
    'no-empty-pattern': 'error',
    'no-empty-static-block': 'error',
    'no-eval': 'error',
    'no-ex-assign': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-extra-boolean-cast': 'error',
    'no-extra-label': 'error',
    'no-fallthrough': 'error',
    'no-func-assign': 'error',
    'no-global-assign': 'error',
    'no-implicit-coercion': 'error',
    'no-implicit-globals': 'error',
    'no-implied-eval': 'error',
    'no-import-assign': 'error',
    'no-inner-declarations': 'error',
    'no-invalid-regexp': 'error',
    'no-invalid-this': 'error',
    'no-irregular-whitespace': 'error',
    'no-iterator': 'error',
    'no-label-var': 'error',
    'no-labels': ['error', { allowLoop: true }],
    'no-lone-blocks': 'error',
    'no-loop-func': 'error',
    'no-loss-of-precision': 'error',
    'no-magic-numbers': [
      'error',
      {
        detectObjects: true,
        enforceConst: true,
        ignore: [-1, 0, 1],
        ignoreArrayIndexes: true,
        ignoreClassFieldInitialValues: true,
        ignoreDefaultValues: true,
      },
    ],
    'no-misleading-character-class': 'error',
    'no-mixed-requires': 'error',
    'no-multi-assign': 'error',
    'no-multi-str': 'error',
    'no-nested-ternary': 'error',
    'no-new': 'error',
    'no-new-func': 'error',
    'no-new-native-nonconstructor': 'error',
    'no-new-object': 'error',
    'no-new-require': 'error',
    'no-new-symbol': 'error',
    'no-new-wrappers': 'error',
    'no-nonoctal-decimal-escape': 'error',
    'no-obj-calls': 'error',
    'no-octal': 'error',
    'no-octal-escape': 'error',
    'no-path-concat': 'error',
    'no-plusplus': 'error',
    'no-process-env': 'error',
    'no-process-exit': 'error',
    'no-promise-executor-return': 'error',
    'no-proto': 'error',
    'no-prototype-builtins': 'error',
    'no-redeclare': 'error',
    'no-regex-spaces': 'error',
    'no-restricted-globals': ['error', 'event'],
    'no-restricted-syntax': ['error', 'WithStatement', "BinaryExpression[operator='in']"],
    'no-return-assign': 'error',
    'no-return-await': 'error',
    'no-script-url': 'error',
    'no-self-assign': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-setter-return': 'error',
    'no-shadow': ['error', { hoist: 'all' }],
    'no-shadow-restricted-names': 'error',
    'no-sparse-arrays': 'error',
    'no-template-curly-in-string': 'error',
    'no-this-before-super': 'error',
    'no-throw-literal': 'error',
    'no-undef': 'error',
    'no-undef-init': 'error',
    'no-underscore-dangle': [
      'error',
      {
        allow: ['_', '_this', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9'],
        allowAfterSuper: true,
        allowAfterThis: true,
        allowAfterThisConstructor: true,
        allowFunctionParams: false,
        allowInArrayDestructuring: false,
        enforceInClassFields: true,
        enforceInMethodNames: true,
      },
    ],
    'no-unmodified-loop-condition': 'error',
    'no-unneeded-ternary': 'error',
    'no-unreachable': 'error',
    'no-unreachable-loop': 'error',
    'no-unsafe-finally': 'error',
    'no-unsafe-negation': 'error',
    'no-unsafe-optional-chaining': 'error',
    'no-unused-expressions': 'error',
    'no-unused-labels': 'error',
    'no-unused-private-class-members': 'error',
    'no-unused-vars': 'error',
    'no-use-before-define': 'error',
    'no-useless-backreference': 'error',
    'no-useless-call': 'error',
    'no-useless-catch': 'error',
    'no-useless-computed-key': ['error', { enforceForClassMembers: true }],
    'no-useless-concat': 'error',
    'no-useless-constructor': 'error',
    'no-useless-escape': 'error',
    'no-useless-rename': 'error',
    'no-useless-return': 'error',
    'no-var': 'error',
    'no-void': 'error',
    'no-with': 'error',
    'object-shorthand': ['error', 'always', { avoidExplicitReturnArrows: true, avoidQuotes: true }],
    'one-var': ['error', 'never'],
    'operator-assignment': 'error',
    'padding-line-between-statements': [
      'error',
      /* eslint-disable sort-keys -- Logically ordered */
      { blankLine: 'always', prev: 'directive', next: '*' },
      { blankLine: 'always', prev: 'function', next: 'function' },
      /* eslint-enable sort-keys -- Restore */
    ],
    'prefer-arrow-callback': 'error',
    'prefer-const': 'error',
    'prefer-destructuring': 'error',
    'prefer-exponentiation-operator': 'error',
    'prefer-numeric-literals': 'error',
    'prefer-object-spread': 'error',
    'prefer-promise-reject-errors': 'error',
    'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'prefer-template': 'error',
    radix: 'error',
    'require-atomic-updates': 'error',
    'require-unicode-regexp': 'error',
    'require-yield': 'error',
    'spaced-comment': 'error',
    'symbol-description': 'error',
    'use-isnan': 'error',
    'valid-typeof': 'error',
    'vars-on-top': 'error',
    yoda: 'error',
  },

  ...eslintCommentsPlugin.configs.recommended.rules,
  'eslint-comments/no-unused-disable': 'error',
  'eslint-comments/require-description': 'error',

  ...importPlugin.configs.recommended.rules,
  'import/consistent-type-specifier-style': ['error', 'prefer-inline'],
  'import/first': ['error', 'absolute-first'],
  'import/newline-after-import': 'error',
  'import/no-absolute-path': 'error',
  'import/no-amd': 'error',
  'import/no-anonymous-default-export': [
    'error',
    { allowArray: true, allowCallExpression: true, allowLiteral: true, allowNew: true, allowObject: true },
  ],
  'import/no-commonjs': 'error',
  'import/no-cycle': ['error', { ignoreExternal: true }],
  'import/no-duplicates': ['error', { 'prefer-inline': true }],
  'import/no-dynamic-require': 'error',
  'import/no-empty-named-blocks': 'error',
  'import/no-extraneous-dependencies': 'error',
  'import/no-mutable-exports': 'error',
  'import/no-named-as-default-member': 'error',
  'import/no-named-default': 'error',
  'import/no-self-import': 'error',
  'import/no-unresolved': ['error', { caseSensitiveStrict: true }],
  'import/no-unused-modules': 'error',
  'import/no-useless-path-segments': ['error', { noUselessIndex: true }],
  'import/no-webpack-loader-syntax': 'error',
  'import/order': [
    'error',
    {
      alphabetize: { order: 'asc' },
      groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index'],
      'newlines-between': 'always',
      warnOnUnassignedImports: true,
    },
  ],
  'import/prefer-default-export': 'error',
  'import/unambiguous': 'error',

  ...promisePlugin.configs.recommended.rules,
  'promise/no-multiple-resolved': 'error',

  ...regexpPlugin.configs.recommended.rules,
  'regexp/hexadecimal-escape': ['error', 'never'],
  'regexp/letter-case': 'error',
  'regexp/no-empty-character-class': 'error',
  'regexp/no-extra-lookaround-assertions': 'error',
  'regexp/no-misleading-capturing-group': 'error',
  'regexp/no-misleading-unicode-character': 'error',
  'regexp/no-missing-g-flag': 'error',
  'regexp/no-octal': 'error',
  'regexp/no-standalone-backslash': 'error',
  'regexp/prefer-escape-replacement-dollar-char': 'error',
  'regexp/prefer-named-backreference': 'error',
  'regexp/prefer-named-replacement': 'error',
  'regexp/prefer-quantifier': 'error',
  'regexp/prefer-result-array-groups': 'error',
  'regexp/unicode-escape': 'error',
  'regexp/use-ignore-case': 'error',

  ...sonarjsPlugin.configs.recommended.rules,
  'sonarjs/cognitive-complexity': 'off',
  'sonarjs/max-switch-cases': 'off',
  'sonarjs/no-inverted-boolean-check': 'error',
  'sonarjs/no-nested-template-literals': 'off',
  'sonarjs/no-small-switch': 'off',
  'sonarjs/prefer-immediate-return': 'off',
  'sonarjs/prefer-single-boolean-return': 'off',

  ...unicornPlugin.configs.recommended.rules,
  'unicorn/filename-case': 'off',
  'unicorn/no-unsafe-regex': 'error',
  'unicorn/prefer-event-target': 'error',
  'unicorn/require-post-message-target-origin': 'error',
};
